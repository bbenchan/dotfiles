# A TOML linter such as https://taplo.tamasfe.dev/ can use this schema to validate your config.
# If you encounter any issues, please make an issue at https://github.com/yazi-rs/schemas.
"$schema" = "https://yazi-rs.github.io/schemas/yazi.json"

[manager]
ratio          = [ 1, 3, 4 ]
sort_by        = "alphabetical"
sort_sensitive = false
sort_reverse   = false
sort_dir_first = true
# linemode       = "none"
show_hidden    = true
show_symlink   = true
scrolloff      = 5

[preview]
tab_size        = 2
max_width       = 1200
max_height      = 1800
cache_dir       = ""
image_filter    = "triangle"
image_quality   = 75
sixel_fraction  = 15
ueberzug_scale  = 1
ueberzug_offset = [ 0, 0, 0, 0 ]

[opener]
edit = [
  { run = '${EDITOR:=vi} "$@"', desc = "$EDITOR", block = true, for = "unix" },
  { run = 'code "%*"',          orphan = true, for = "windows" },
]
open = [
  { run = 'xdg-open "$@"',                desc = "Open", for = "linux" },
  { run = 'open "$@"',                    desc = "Open", for = "macos" },
  { run = 'start "" "%1"', orphan = true, desc = "Open", for = "windows" }
]
reveal = [
  { run = 'open -R "$1"',                          desc = "Reveal", for = "macos" },
  { run = 'explorer /select, "%1"', orphan = true, desc = "Reveal", for = "windows" },
  { run = '''exiftool "$1"; echo "Press enter to exit"; read''', block = true, desc = "Show EXIF", for = "unix" },
]
extract = [
  { run = 'ouch decompress "$1"', desc = "Extract here(ouch)", for = "unix" },
  { run = 'unar "$1"', desc = "Extract here", for = "unix" },
  { run = 'unar "%1"', desc = "Extract here", for = "windows" },
]
play = [
  { run = 'mpv "$@"', orphan = true, for = "unix" },
  { run = 'mpv "%1"', orphan = true, for = "windows" },
  { run = '''mediainfo "$1"; echo "Press enter to exit"; read''', block = true, desc = "Show media info", for = "unix" },
]

[open]
rules = [
  { name = "*/", use = [ "edit", "open", "reveal" ] },

  { mime = "text/*",  use = [ "edit", "reveal" ] },
  { mime = "image/*", use = [ "open", "reveal" ] },
  { mime = "video/*", use = [ "play", "reveal" ] },
  { mime = "audio/*", use = [ "play", "reveal" ] },
  { mime = "inode/x-empty", use = [ "edit", "reveal" ] },

  { mime = "application/json", use = [ "edit", "reveal" ] },
  { mime = "*/javascript",     use = [ "edit", "reveal" ] },

  { mime = "application/zip",             use = [ "extract", "reveal" ] },
  { mime = "application/gzip",            use = [ "extract", "reveal" ] },
  { mime = "application/x-tar",           use = [ "extract", "reveal" ] },
  { mime = "application/x-bzip",          use = [ "extract", "reveal" ] },
  { mime = "application/x-bzip2",         use = [ "extract", "reveal" ] },
  { mime = "application/x-7z-compressed", use = [ "extract", "reveal" ] },
  { mime = "application/x-rar",           use = [ "extract", "reveal" ] },
  { mime = "application/xz",              use = [ "extract", "reveal" ] },

  { mime = "*", use = [ "open", "reveal" ] },
]

[tasks]
micro_workers    = 10
macro_workers    = 25
bizarre_retry    = 5
image_alloc      = 536870912  # 512MB
image_bound      = [ 0, 0 ]
suppress_preload = false

[plugin]
preloaders = [
  # Image
  { mime = "image/vnd.djvu", run = "noop" },
  { mime = "image/*",        run = "image" },
  # Video
  { mime = "video/*", run = "video" },
  # PDF
  { mime = "application/pdf", run = "pdf" },
]
previewers = [
  { name = "*/", run = "folder", sync = true },
  # Code
  { mime = "text/*",                 run = "code" },
  { mime = "*/xml",                  run = "code" },
  { mime = "*/javascript",           run = "code" },
  { mime = "*/x-wine-extension-ini", run = "code" },
  # JSON
  { mime = "application/json", run = "json" },
  # Image
  { mime = "image/vnd.djvu", run = "noop" },
  { mime = "image/*",        run = "image" },
  # Video
  { mime = "video/*", run = "video" },
  # PDF
  { mime = "application/pdf", run = "pdf" },
  # Archive
  { mime = "application/zip",             run = "archive" },
  { mime = "application/gzip",            run = "archive" },
  { mime = "application/x-tar",           run = "archive" },
  { mime = "application/x-bzip",          run = "archive" },
  { mime = "application/x-bzip2",         run = "archive" },
  { mime = "application/x-7z-compressed", run = "archive" },
  { mime = "application/x-rar",           run = "archive" },
  { mime = "application/xz",              run = "archive" },
  # Fallback
  { name = "*", run = "file" },
]
prepend_previewers = [
  { mime = "text/csv", run = "miller" },
  { name = "*.md", run = "glow" },
]
